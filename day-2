import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'miniMaxSum' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static void miniMaxSum(List<Integer> arr) {
        // Initialize sum variables to hold the sums
        long su = 0;
        long k = 0;
        
        int n = arr.size(); // Get the size of the list
        
        // Calculate the sum of all elements except the last one
        for (int i = 0; i < n - 1; i++) {
            su = su + arr.get(i);
        }
        
        // Calculate the sum of all elements except the first one
        for (int j = 1; j < n; j++) {
            k = k + arr.get(j);
        }
        
        // Print the minimum and maximum sum
        System.out.println(su + " " + k);
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        // BufferedReader to read input
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        // Read the input and convert it into a List of Integers
        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        // Call the miniMaxSum function to process the list
        Result.miniMaxSum(arr);

        // Close the bufferedReader
        bufferedReader.close();
    }
}
